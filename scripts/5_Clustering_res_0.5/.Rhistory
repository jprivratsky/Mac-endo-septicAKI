knitr::opts_chunk$set(fig.width=12, fig.height=8,
echo=TRUE, warning=FALSE, message=FALSE, error=FALSE
, tidy.opts=list(width.cutoff=60),tidy=TRUE
, cache=TRUE)
knitr::opts_knit$set(root.dir = '/data/omicscore/Privratsky-Privratsky-20210215')
# Load the Cell Ranger Matrix Data and create the base Seurat object.
# we initialize the Seurat object (`CreateSeuratObject`) with the raw (non-normalized data).
library(Seurat)
dataset_loc <- "~/Documents/CLPscRNAseq/raw/"
ids <- c("C0", "C24")
d10x.data <- sapply(ids, function(i){
d10x <- Read10X(file.path(dataset_loc,i,"filtered_feature_bc_matrix/"))
colnames(d10x) <- paste(sapply(strsplit(colnames(d10x),split="-"),'[[',1L),i,sep="--")
d10x
})
# Load the Cell Ranger Matrix Data and create the base Seurat object.
# we initialize the Seurat object (`CreateSeuratObject`) with the raw (non-normalized data).
library(Seurat)
dataset_loc <- "~/Documents/CLPscRNAseq"
ids <- c("C0", "C24")
d10x.data <- sapply(ids, function(i){
d10x <- Read10X(file.path(dataset_loc,i,"filtered_feature_bc_matrix/"))
colnames(d10x) <- paste(sapply(strsplit(colnames(d10x),split="-"),'[[',1L),i,sep="--")
d10x
})
# Load the Cell Ranger Matrix Data and create the base Seurat object.
# we initialize the Seurat object (`CreateSeuratObject`) with the raw (non-normalized data).
library(Seurat)
dataset_loc <- "~/Documents/CLPscRNAseq/"
ids <- c("C0", "C24")
d10x.data <- sapply(ids, function(i){
d10x <- Read10X(file.path(dataset_loc,i,"filtered_feature_bc_matrix/"))
colnames(d10x) <- paste(sapply(strsplit(colnames(d10x),split="-"),'[[',1L),i,sep="--")
d10x
})
# Load the Cell Ranger Matrix Data and create the base Seurat object.
# we initialize the Seurat object (`CreateSeuratObject`) with the raw (non-normalized data).
library(Seurat)
dataset_loc <- "~/Documents/CLPscRNAseq/raw/"
ids <- c("C0", "C24")
d10x.data <- sapply(ids, function(i){
d10x <- Read10X(file.path(dataset_loc,i,"filtered_feature_bc_matrix/"))
colnames(d10x) <- paste(sapply(strsplit(colnames(d10x),split="-"),'[[',1L),i,sep="--")
d10x
})
knitr::opts_chunk$set(fig.width=12, fig.height=8,
echo=TRUE, warning=FALSE, message=FALSE, error=FALSE
, tidy.opts=list(width.cutoff=60),tidy=TRUE
, cache=TRUE)
knitr::opts_knit$set(root.dir = '~/')
# Load the Cell Ranger Matrix Data and create the base Seurat object.
# we initialize the Seurat object (`CreateSeuratObject`) with the raw (non-normalized data).
library(Seurat)
dataset_loc <- "~/Documents/CLPscRNAseq/raw/"
ids <- c("C0", "C24")
d10x.data <- sapply(ids, function(i){
d10x <- Read10X(file.path(dataset_loc,i,"filtered_feature_bc_matrix/"))
colnames(d10x) <- paste(sapply(strsplit(colnames(d10x),split="-"),'[[',1L),i,sep="--")
d10x
})
# Load the Cell Ranger Matrix Data and create the base Seurat object.
# we initialize the Seurat object (`CreateSeuratObject`) with the raw (non-normalized data).
library(Seurat)
dataset_loc <- "~/Documents/CLPscRNAseq/raw/"
ids <- c("C0", "C24")
d10x.data <- sapply(ids, function(i){
d10x <- Read10X(file.path(dataset_loc,i,"filtered_feature_bc_matrix/"))
colnames(d10x) <- paste(sapply(strsplit(colnames(d10x),split="-"),'[[',1L),i,sep="--")
d10x
})
experiment.data <- do.call("cbind", d10x.data)
experiment.aggregate <- CreateSeuratObject(
experiment.data,
project = "ShamCLP-201008",
names.field = 2,
names.delim = "\\-\\-")
experiment.aggregate
experiment.aggregate[["percent.mito"]] <- PercentageFeatureSet(experiment.aggregate, pattern = "^mt-")
summary(experiment.aggregate[["percent.mito"]])
samplename = experiment.aggregate@meta.data$orig.ident
table(samplename)
sample.id = rep("C0",length(samplename))
sample.id[samplename %in% c("C24")] = "C24"
names(sample.id) = rownames(experiment.aggregate@meta.data)
experiment.aggregate <- AddMetaData(
object = experiment.aggregate,
metadata = sample.id,
col.name = "sample.id")
table(sample.id)
hist(experiment.aggregate$nCount_RNA, xlab = "Library sizes", breaks = 100, col = "grey80",
ylab = "Number of cells", main = "Distribution of library sizes
(= total number of transcripts per cell = $nCount_RNA)",
cex.main = 1)
abline(v = 2000, col = "red")
pdf(paste0(outdir, "/4_Library_size.pdf")
, width = 8
, height = 9)
hist(experiment.aggregate$nCount_RNA, xlab = "Library sizes", breaks = 100, col = "grey80",
ylab = "Number of cells", main = "Distribution of library sizes
(= total number of transcripts per cell = $nCount_RNA)",
cex.main = 1)
abline(v = 2000, col = "red")
#pdf(paste0(outdir, "/4_Library_size.pdf")
#   , width = 8
#  , height = 9)
hist(experiment.aggregate$nCount_RNA, xlab = "Library sizes", breaks = 100, col = "grey80",
ylab = "Number of cells", main = "Distribution of library sizes
(= total number of transcripts per cell = $nCount_RNA)",
cex.main = 1)
abline(v = 2000, col = "red")
dev.off()
saveRDS(experiment.aggregate, paste0(outdir, "/5.experiment.aggregate.158.rds"))
outdir <- "./Documents/CLPscRNAseq/processedData/1_JP_analyses_results/1_QC_filtering_metrics"
dir.create(outdir, recursive = T)
colors <- c("#12999E", "#FDA908")
names(colors) <- levels(as.factor(sample.id))
v <- VlnPlot(experiment.aggregate, features = c("nFeature_RNA", "nCount_RNA", "percent.mito"), ncol = 3, cols = colors, group.by = "sample.id")
v
pdf(paste0(outdir, "/1_VlnPlots_nFeature_RNA_nCount_RNA_percent.mito_per_sample_before_filtering.pdf")
, width = 21
, height = 9)
v
dev.off()
knitr::opts_chunk$set(fig.width=12, fig.height=8,
echo=TRUE, warning=FALSE, message=FALSE, error=FALSE
, tidy.opts=list(width.cutoff=60),tidy=TRUE
, cache=TRUE)
knitr::opts_knit$set(root.dir = '~/Documents/CLPscRNAseq/')
# knitr::opts_knit$set(root.dir = '~/Volumes/HARDAC-OmicsCore/Privratsky-Privratsky-20210215')
indir <- "./processedData/1_JP_analyses_results/1_QC_filtering_metrics"
outdir <- "./processedData/2_1_Resolution_choice"
dir.create(outdir, recursive = T)
library(Seurat)
filtered <- readRDS(paste0(indir, "/15.filtered.398.rds"))
filtered
library(cowplot)
list <- SplitObject(filtered, split.by = "sample.id")
list <- lapply(X = list, FUN = function(x) {
x <- NormalizeData(x)
x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 2000)
})
anchors <- FindIntegrationAnchors(object.list = list, dims = 1:20)
integrated <- IntegrateData(anchorset = anchors, dims = 1:20)
